// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let macro-gql: **/node_modules/** 1`] = `
Array [
  node_modules/@types/graphql-let/__generated__/input-Viewer-Partial.d.ts,
  node_modules/@types/graphql-let/index.d.ts,
  node_modules/@types/graphql-let/macro.d.ts,
  node_modules/graphql-let/__generated__/input-Viewer-Partial.ts,
]
`;

exports[`graphql-let macro-gql: macro-gql 1`] = `

import { gql } from 'graphql-let/macro';

const { useViewerQuery } = gql(\`
  # import Partial from './documents/partial.graphql'
  query Viewer {
    viewer {
      ...Partial
    }
  }
\`);

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name as string;
          // @ts-expect-error
          useViewerQuery() as number;
        }
      }
    }
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import * as Va8ca7f2176b9dce4e4ba81526fcae512e2279848 from './node_modules/graphql-let/__generated__/input-Viewer-Partial.ts';
const { useViewerQuery } = Va8ca7f2176b9dce4e4ba81526fcae512e2279848;

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name; // @ts-expect-error

          useViewerQuery();
        }
      }
    }
  }
}


`;

exports[`graphql-let macro-gql: node_modules/@types/graphql-let/__generated__/input-Viewer-Partial.d.ts 1`] = `
/* a8ca7f2176b9dce4e4ba81526fcae512e2279848
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};
`;

exports[`graphql-let macro-gql: node_modules/@types/graphql-let/index.d.ts 1`] = `
import Ta8ca7f2176b9dce4e4ba81526fcae512e2279848 from './__generated__/input-Viewer-Partial';
export function gql(gql: \`
  # import Partial from './documents/partial.graphql'
  query Viewer {
    viewer {
      ...Partial
    }
  }
\`): Ta8ca7f2176b9dce4e4ba81526fcae512e2279848.__GraphQLLetTypeInjection;

`;

exports[`graphql-let macro-gql: node_modules/@types/graphql-let/macro.d.ts 1`] = `
export { gql } from ".";

`;

exports[`graphql-let macro-gql: node_modules/graphql-let/__generated__/input-Viewer-Partial.ts 1`] = `
/* a8ca7f2176b9dce4e4ba81526fcae512e2279848
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name' | 'status'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
  status
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
`;

exports[`graphql-let macro-load: **/node_modules/** 1`] = `
Array [
  node_modules/@types/graphql-let/__generated__/input-Viewer-Partial.d.ts,
  node_modules/@types/graphql-let/index.d.ts,
  node_modules/@types/graphql-let/macro.d.ts,
  node_modules/graphql-let/__generated__/input-Viewer-Partial.ts,
]
`;

exports[`graphql-let macro-load: macro-load 1`] = `

import { load } from 'graphql-let/macro';

const { useViewerQuery } = load(\`./documents/viewer.graphql\`);

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name as string;
          // @ts-expect-error
          useViewerQuery() as number;
        }
      }
    }
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import * as Va8ca7f2176b9dce4e4ba81526fcae512e2279848 from './node_modules/graphql-let/__generated__/input-Viewer-Partial.ts';
const { useViewerQuery } = Va8ca7f2176b9dce4e4ba81526fcae512e2279848;

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name; // @ts-expect-error

          useViewerQuery();
        }
      }
    }
  }
}


`;

exports[`graphql-let macro-load: node_modules/@types/graphql-let/__generated__/input-Viewer-Partial.d.ts 1`] = `
/* a8ca7f2176b9dce4e4ba81526fcae512e2279848
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};
`;

exports[`graphql-let macro-load: node_modules/@types/graphql-let/index.d.ts 1`] = `
import Ta8ca7f2176b9dce4e4ba81526fcae512e2279848 from './__generated__/input-Viewer-Partial';
export function load(load: \`./documents/viewer.graphql\`): Ta8ca7f2176b9dce4e4ba81526fcae512e2279848.__GraphQLLetTypeInjection;

`;

exports[`graphql-let macro-load: node_modules/@types/graphql-let/macro.d.ts 1`] = `
export { load } from ".";

`;

exports[`graphql-let macro-load: node_modules/graphql-let/__generated__/input-Viewer-Partial.ts 1`] = `
/* a8ca7f2176b9dce4e4ba81526fcae512e2279848
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name' | 'status'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
  status
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
`;

exports[`graphql-let plugin: **/node_modules/** 1`] = `
Array [
  node_modules/@types/graphql-let/__generated__/input-Viewer.d.ts,
  node_modules/@types/graphql-let/index.d.ts,
  node_modules/@types/graphql-let/macro.d.ts,
  node_modules/graphql-let/__generated__/input-Viewer.ts,
]
`;

exports[`graphql-let plugin: node_modules/@types/graphql-let/__generated__/input-Viewer.d.ts 1`] = `
/* 4de3a990eddfa70dba05f32dbaca0afc6aca7bda
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};
`;

exports[`graphql-let plugin: node_modules/@types/graphql-let/index.d.ts 1`] = `
import T4de3a990eddfa70dba05f32dbaca0afc6aca7bda from './__generated__/input-Viewer';
export function gql(gql: \`query Viewer { viewer { name } }\`): T4de3a990eddfa70dba05f32dbaca0afc6aca7bda.__GraphQLLetTypeInjection;

`;

exports[`graphql-let plugin: node_modules/@types/graphql-let/macro.d.ts 1`] = `
export { gql } from ".";

`;

exports[`graphql-let plugin: node_modules/graphql-let/__generated__/input-Viewer.ts 1`] = `
/* 4de3a990eddfa70dba05f32dbaca0afc6aca7bda
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'name'>
  )> }
);


export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
`;

exports[`graphql-let plugin: plugin 1`] = `

import { gql } from 'graphql-let';

const { useViewerQuery } = gql(\`query Viewer { viewer { name } }\`);

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name as string;
          // @ts-expect-error
          useViewerQuery() as number;
        }
      }
    }
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import * as V4de3a990eddfa70dba05f32dbaca0afc6aca7bda from './node_modules/graphql-let/__generated__/input-Viewer.ts';
const { useViewerQuery } = V4de3a990eddfa70dba05f32dbaca0afc6aca7bda;

function nest1() {
  function nest2() {
    function nest3() {
      function nest4() {
        function MyComponent() {
          useViewerQuery().data.viewer.name; // @ts-expect-error

          useViewerQuery();
        }
      }
    }
  }
}


`;
