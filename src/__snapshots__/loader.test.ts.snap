// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader generates .tsx and .d.ts 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;

exports[`graphql-let/loader generates .tsx and .d.ts 2`] = `
"import * as Va6306cb6adb2fd1f9b5d907f0d5ba6cdeefaa51e from \\"./../__generated__/pages/index-ViewerY-Partial.tsx\\";
import * as Vfb38f64fc6fadc6653df67e5d98df8c16bf04b55 from \\"./../__generated__/pages/index-Viewer-Partial.tsx\\";
const {
  useViewerQuery
} = Vfb38f64fc6fadc6653df67e5d98df8c16bf04b55;
useViewerQuery().data.viewer.name; // @ts-expect-error

useViewerQuery();
const {
  useViewerYQuery
} = Va6306cb6adb2fd1f9b5d907f0d5ba6cdeefaa51e;
useViewerYQuery().data.viewer.name; // @ts-expect-error

useViewerYQuery();"
`;

exports[`graphql-let/loader options accept absolute config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  return Apollo.useQuery(GetFruitsDocument, baseOptions);
}
export function useGetFruitsLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(GetFruitsDocument, baseOptions);
}"
`;

exports[`graphql-let/loader options accept relative config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  return Apollo.useQuery(GetFruitsDocument, baseOptions);
}
export function useGetFruitsLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(GetFruitsDocument, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 1`] = `
"/* 85d5d10810aac8135d819a4715c5ff518d9cd1f1
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 2`] = `
"/* 85d5d10810aac8135d819a4715c5ff518d9cd1f1
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 3`] = `
"/* c2544ded7ae4f8763eb2f0a27218303c6f1ca946
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 4`] = `
"/* c2544ded7ae4f8763eb2f0a27218303c6f1ca946
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 5`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export function useViewer2Query(baseOptions) {
  return Apollo.useQuery(Viewer2Document, baseOptions);
}
export function useViewer2LazyQuery(baseOptions) {
  return Apollo.useLazyQuery(Viewer2Document, baseOptions);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 6`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export function useViewer2Query(baseOptions) {
  return Apollo.useQuery(Viewer2Document, baseOptions);
}
export function useViewer2LazyQuery(baseOptions) {
  return Apollo.useLazyQuery(Viewer2Document, baseOptions);
}"
`;
