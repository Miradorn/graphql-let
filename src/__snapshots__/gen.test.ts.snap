// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"graphql-let" command basic: **/*.graphql.d.ts + **/*.graphqls.d.ts 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
  "schema/type-defs.graphqls.d.ts",
]
`;

exports[`"graphql-let" command basic: pages/viewer.graphql.d.ts 1`] = `
"/* 7210e1120779f99e5c55e782e5a24c6f0af8b78b
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer?: Maybe<({
        __typename?: 'User';
    } & Pick<User, 'id' | 'name' | 'status'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
    [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
"
`;

exports[`"graphql-let" command basic: schema/type-defs.graphqls.d.ts 1`] = `
"/* 7969f53526f17d0fbe150fa8d043d04c1fc5ce3e
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    User: ResolverTypeWrapper<User>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    User: User;
    ID: Scalars['ID'];
    String: Scalars['String'];
    Boolean: Scalars['Boolean'];
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
    Query?: QueryResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default DocumentNode
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__ + node_modules 1`] = `
Array [
  "__generated__/pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.tsx",
  "__generated__/pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.tsx",
  "__generated__/pages/partial.graphql.tsx",
  "__generated__/pages/viewer.graphql.tsx",
  "__generated__/pages/viewerWithFragment.graphql.tsx",
  "node_modules/@types/graphql-let/index.d.ts",
  "node_modules/@types/graphql-let/pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.d.ts",
  "node_modules/@types/graphql-let/pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.d.ts",
  "node_modules/@types/graphql-let/store.json",
]
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__/pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.tsx 1`] = `
"/* 1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerXQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerXQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'name'>
  )> }
);


export const ViewerXDocument = gql\`
    query ViewerX {
  viewer {
    name
  }
}
    \`;

/**
 * __useViewerXQuery__
 *
 * To run a query within a React component, call \`useViewerXQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerXQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerXQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerXQuery(baseOptions?: Apollo.QueryHookOptions<ViewerXQuery, ViewerXQueryVariables>) {
        return Apollo.useQuery<ViewerXQuery, ViewerXQueryVariables>(ViewerXDocument, baseOptions);
      }
export function useViewerXLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerXQuery, ViewerXQueryVariables>) {
          return Apollo.useLazyQuery<ViewerXQuery, ViewerXQueryVariables>(ViewerXDocument, baseOptions);
        }
export type ViewerXQueryHookResult = ReturnType<typeof useViewerXQuery>;
export type ViewerXLazyQueryHookResult = ReturnType<typeof useViewerXLazyQuery>;
export type ViewerXQueryResult = Apollo.QueryResult<ViewerXQuery, ViewerXQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__/pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.tsx 1`] = `
"/* 57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerYQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerYQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerYDocument = gql\`
    query ViewerY {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
        return Apollo.useQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, baseOptions);
      }
export function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
          return Apollo.useLazyQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, baseOptions);
        }
export type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__/pages/partial.graphql.tsx 1`] = `
"/* 11672f4044edafe17d0906686a81c990b168e7c2
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__/pages/viewer.graphql.tsx 1`] = `
"/* 39ca9b58b79dabab871a8bc0b4b21cd9b9492cd3
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name' | 'status'>
  )> }
);


export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: __generated__/pages/viewerWithFragment.graphql.tsx 1`] = `
"/* cf661bf4d55e85f0b0f4f07f0d0a3b94ef4ba984
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type Viewer2QueryVariables = Exact<{ [key: string]: never; }>;


export type Viewer2Query = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */
export function useViewer2Query(baseOptions?: Apollo.QueryHookOptions<Viewer2Query, Viewer2QueryVariables>) {
        return Apollo.useQuery<Viewer2Query, Viewer2QueryVariables>(Viewer2Document, baseOptions);
      }
export function useViewer2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Viewer2Query, Viewer2QueryVariables>) {
          return Apollo.useLazyQuery<Viewer2Query, Viewer2QueryVariables>(Viewer2Document, baseOptions);
        }
export type Viewer2QueryHookResult = ReturnType<typeof useViewer2Query>;
export type Viewer2LazyQueryHookResult = ReturnType<typeof useViewer2LazyQuery>;
export type Viewer2QueryResult = Apollo.QueryResult<Viewer2Query, Viewer2QueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd from './pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.d.ts';
export default function gql(gql: \`
  query ViewerX {
    viewer {
      name
    }
  }
\`): T1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.__AllExports;
import T57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df from './pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.d.ts';
export default function gql(gql: \`
  # import Partial from './partial.graphql'
  query ViewerY {
    viewer {
      ...Partial
    }
  }
\`): T57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.__AllExports;
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.d.ts 1`] = `
"/* 1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerXQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerXQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerXDocument: Apollo.DocumentNode;
/**
 * __useViewerXQuery__
 *
 * To run a query within a React component, call \`useViewerXQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerXQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerXQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerXQuery(baseOptions?: Apollo.QueryHookOptions<ViewerXQuery, ViewerXQueryVariables>): Apollo.QueryResult<ViewerXQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerXLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerXQuery, ViewerXQueryVariables>): Apollo.QueryTuple<ViewerXQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerXQueryHookResult = ReturnType<typeof useViewerXQuery>;
export declare type ViewerXLazyQueryHookResult = ReturnType<typeof useViewerXLazyQuery>;
export declare type ViewerXQueryResult = Apollo.QueryResult<ViewerXQuery, ViewerXQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  MakeOptional: MakeOptional;
  MakeMaybe: MakeMaybe;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerXQueryVariables: ViewerXQueryVariables;
  ViewerXQuery: ViewerXQuery;
  ViewerXDocument: ViewerXDocument;
  useViewerXQuery: typeof useViewerXQuery;
  useViewerXLazyQuery: typeof useViewerXLazyQuery;
  ViewerXQueryHookResult: ViewerXQueryHookResult;
  ViewerXLazyQueryHookResult: ViewerXLazyQueryHookResult;
  ViewerXQueryResult: ViewerXQueryResult;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.d.ts 1`] = `
"/* 57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerYQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerYQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerYDocument: Apollo.DocumentNode;
/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryResult<ViewerYQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryTuple<ViewerYQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export declare type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export declare type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  MakeOptional: MakeOptional;
  MakeMaybe: MakeMaybe;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerYQueryVariables: ViewerYQueryVariables;
  ViewerYQuery: ViewerYQuery;
  PartialFragment: PartialFragment;
  PartialFragmentDoc: PartialFragmentDoc;
  ViewerYDocument: ViewerYDocument;
  useViewerYQuery: typeof useViewerYQuery;
  useViewerYLazyQuery: typeof useViewerYLazyQuery;
  ViewerYQueryHookResult: ViewerYQueryHookResult;
  ViewerYLazyQueryHookResult: ViewerYLazyQueryHookResult;
  ViewerYQueryResult: ViewerYQueryResult;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/store.json 1`] = `
"{
  \\"pages/index.tsx\\": {
    \\"1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd\\": [
      \\"pages/index-1e7eaf728604c74fc0aa766fb12f5ffa1b3643dd.d.ts\\",
      \\"\\\\n  query ViewerX {\\\\n    viewer {\\\\n      name\\\\n    }\\\\n  }\\\\n\\"
    ],
    \\"57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df\\": [
      \\"pages/index-57d98d6de1da51f6dc5dbbe0f2b1cf8e01f634df.d.ts\\",
      \\"\\\\n  # import Partial from './partial.graphql'\\\\n  query ViewerY {\\\\n    viewer {\\\\n      ...Partial\\\\n    }\\\\n  }\\\\n\\"
    ]
  }
}"
`;

exports[`"graphql-let" command exclude files 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
  "schema/type-defs.graphqls.d.ts",
]
`;

exports[`"graphql-let" command gitignore 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
  "schema/type-defs.graphqls.d.ts",
]
`;

exports[`"graphql-let" command keep caches 1`] = `
Array [
  Object {
    "dtsRelPath": "schema/type-defs.graphqls.d.ts",
    "gqlHash": "7969f53526f17d0fbe150fa8d043d04c1fc5ce3e",
    "gqlRelPath": "schema/type-defs.graphqls",
    "tsxRelPath": "schema/type-defs.graphqls.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "7210e1120779f99e5c55e782e5a24c6f0af8b78b",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;

exports[`"graphql-let" command keep caches 2`] = `
Array [
  Object {
    "dtsRelPath": "schema/type-defs.graphqls.d.ts",
    "gqlHash": "7969f53526f17d0fbe150fa8d043d04c1fc5ce3e",
    "gqlRelPath": "schema/type-defs.graphqls",
    "tsxRelPath": "schema/type-defs.graphqls.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "7210e1120779f99e5c55e782e5a24c6f0af8b78b",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;

exports[`"graphql-let" command passes config to graphql-codegen as expected
* "useIndexSignature: true" in config effect to result having "WithIndex<TObject>" type
: schema/type-defs.graphqls.d.ts 1`] = `
Array [
  "schema/type-defs.graphqls.d.ts",
]
`;

exports[`"graphql-let" command passes config to graphql-codegen as expected
* "useIndexSignature: true" in config effect to result having "WithIndex<TObject>" type
: schema/type-defs.graphqls.d.ts 2`] = `
"/* 8774ce7f60dcd7fd3dd89eae3c13c4c43713a194
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type WithIndex<TObject> = TObject & Record<string, any>;
export declare type ResolversObject<TObject> = WithIndex<TObject>;
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = ResolversObject<{
    Query: ResolverTypeWrapper<{}>;
    User: ResolverTypeWrapper<User>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
}>;
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = ResolversObject<{
    Query: {};
    User: User;
    ID: Scalars['ID'];
    String: Scalars['String'];
    Boolean: Scalars['Boolean'];
}>;
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
    viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
}>;
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Resolvers<ContextType = any> = ResolversObject<{
    Query?: QueryResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
}>;
/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default DocumentNode
"
`;
