// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: **/*.graphql.d.ts + **/*.graphqls.d.ts 1`] = `
Array [
  "pages/partial.graphql.d.ts",
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: pages/partial.graphql.d.ts 1`] = `
"/* b1d182e4016dbcf4c946280198ae4047d06b270c
 * This file is automatically generated by graphql-let. */

import * as Types from '../node_modules/@types/graphql-let/__generated__/__types__';
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<Types.User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: import(\\"@apollo/client\\").DocumentNode;
"
`;

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: pages/viewer.graphql.d.ts 1`] = `
"/* 1e62d753794cf1ecc137bf843923ac261246923f
 * This file is automatically generated by graphql-let. */

import * as Types from '../node_modules/@types/graphql-let/__generated__/__types__';
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = Types.Exact<{
    id: Types.Scalars['String'];
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer?: Types.Maybe<({
        __typename?: 'User';
    } & PartialFragment)>;
});
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<Types.User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, any>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, any>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
"
`;

exports[`"graphql-let" command Glob pattern "!" in config excludes files 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Respect .gitignore to ignore from including 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Runs twice and keeps valid caches 1`] = `
Array [
  Object {
    "dtsRelPath": "__types__.d.ts",
    "gqlHash": "f1329092fd6497d27c446729b442e24da40b28c7",
    "tsxRelPath": "__types__.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "48b0428a522b818dfb803bae0c6d649abb40e31d",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;

exports[`"graphql-let" command Runs twice and keeps valid caches 2`] = `
Array [
  Object {
    "dtsRelPath": "__types__.d.ts",
    "gqlHash": "f1329092fd6497d27c446729b442e24da40b28c7",
    "tsxRelPath": "__types__.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "48b0428a522b818dfb803bae0c6d649abb40e31d",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;
