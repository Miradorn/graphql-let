// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: **/*.graphql.d.ts + **/*.graphqls.d.ts 1`] = `
Array [
  "pages/partial.graphql.d.ts",
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: pages/partial.graphql.d.ts 1`] = `
"/* 0e0a9a63c1241925394c29240c3a360cfdf5c700
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: import(\\"@apollo/client\\").DocumentNode;
"
`;

exports[`"graphql-let" command Basic command usage results in generating d.ts and passing tsc type check: pages/viewer.graphql.d.ts 1`] = `
"/* 74a6b4adb0d835420527126c41678832a62a555e
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = __SchemaTypes__.Exact<{
    [key: string]: never;
}>;
export declare type ViewerQuery = ({
    __typename?: 'Query';
} & {
    viewer?: __SchemaTypes__.Maybe<({
        __typename?: 'User';
    } & PartialFragment)>;
});
export declare type PartialFragment = ({
    __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name' | 'status'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, any>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, any>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
"
`;

exports[`"graphql-let" command Glob pattern "!" in config excludes files 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Respect .gitignore to ignore from including 1`] = `
Array [
  "pages/viewer.graphql.d.ts",
]
`;

exports[`"graphql-let" command Runs twice and keeps valid caches 1`] = `
Array [
  Object {
    "dtsRelPath": "__SCHEMA__.d.ts",
    "gqlHash": "53a821dbd25bae67b9558b0c85d090458bf7f7ff",
    "tsxRelPath": "__SCHEMA__.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "83792f8af3b5c03ab10f0c912d4e5d1868801046",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;

exports[`"graphql-let" command Runs twice and keeps valid caches 2`] = `
Array [
  Object {
    "dtsRelPath": "__SCHEMA__.d.ts",
    "gqlHash": "53a821dbd25bae67b9558b0c85d090458bf7f7ff",
    "tsxRelPath": "__SCHEMA__.tsx",
  },
  Object {
    "dtsRelPath": "pages/viewer.graphql.d.ts",
    "gqlHash": "83792f8af3b5c03ab10f0c912d4e5d1868801046",
    "gqlRelPath": "pages/viewer.graphql",
    "tsxRelPath": "pages/viewer.graphql.tsx",
  },
]
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules 1`] = `
Array [
  "node_modules/@types/graphql-let/__generated__/__SCHEMA__.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/from-macro-ViewerFromMacro-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/from-macro-ViewerFromMacro2-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts",
  "node_modules/@types/graphql-let/index.d.ts",
  "node_modules/@types/graphql-let/macro.d.ts",
  "node_modules/graphql-let/__generated__/__SCHEMA__.tsx",
  "node_modules/graphql-let/__generated__/pages/from-macro-ViewerFromMacro-Partial.tsx",
  "node_modules/graphql-let/__generated__/pages/from-macro-ViewerFromMacro2-Partial.tsx",
  "node_modules/graphql-let/__generated__/pages/index-Viewer-Partial.tsx",
  "node_modules/graphql-let/__generated__/pages/index-ViewerY-Partial.tsx",
  "node_modules/graphql-let/__generated__/pages/partial.graphql.tsx",
  "node_modules/graphql-let/__generated__/pages/viewer-from-macro.graphql.tsx",
  "node_modules/graphql-let/__generated__/pages/viewer.graphql.tsx",
]
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/__generated__/__SCHEMA__.d.ts 1`] = `
"/* 44e68f61ec97bb791381bd4af831b2d0a8bf31b7
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Query = {
    __typename?: 'Query';
    viewer?: Maybe<User>;
};
export declare type User = {
    __typename?: 'User';
    id: Scalars['ID'];
    name: Scalars['String'];
    status: Scalars['String'];
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    User: ResolverTypeWrapper<User>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    User: User;
    ID: Scalars['ID'];
    String: Scalars['String'];
    Boolean: Scalars['Boolean'];
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
    Query?: QueryResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

 
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default DocumentNode
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/__generated__/pages/from-macro-ViewerFromMacro-Partial.d.ts 1`] = `
"/* 742b65c478411637ae3b53f3dc596399a9888752
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerFromMacroQueryVariables = __SchemaTypes__.Exact<{
  [key: string]: never;
}>;
export declare type ViewerFromMacroQuery = ({
  __typename?: 'Query';
} & {
  viewer?: __SchemaTypes__.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerFromMacroDocument: Apollo.DocumentNode;
/**
 * __useViewerFromMacroQuery__
 *
 * To run a query within a React component, call \`useViewerFromMacroQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerFromMacroQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerFromMacroQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerFromMacroQuery(baseOptions?: Apollo.QueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>): Apollo.QueryResult<ViewerFromMacroQuery, any>;
export declare function useViewerFromMacroLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>): Apollo.QueryTuple<ViewerFromMacroQuery, any>;
export declare type ViewerFromMacroQueryHookResult = ReturnType<typeof useViewerFromMacroQuery>;
export declare type ViewerFromMacroLazyQueryHookResult = ReturnType<typeof useViewerFromMacroLazyQuery>;
export declare type ViewerFromMacroQueryResult = Apollo.QueryResult<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerFromMacroDocument: typeof ViewerFromMacroDocument;
  useViewerFromMacroQuery: typeof useViewerFromMacroQuery;
  useViewerFromMacroLazyQuery: typeof useViewerFromMacroLazyQuery;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/__generated__/pages/from-macro-ViewerFromMacro2-Partial.d.ts 1`] = `
"/* c11b0471d913a16c353795fd16c42667ce1f4525
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerFromMacro2QueryVariables = __SchemaTypes__.Exact<{
  [key: string]: never;
}>;
export declare type ViewerFromMacro2Query = ({
  __typename?: 'Query';
} & {
  viewer?: __SchemaTypes__.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerFromMacro2Document: Apollo.DocumentNode;
/**
 * __useViewerFromMacro2Query__
 *
 * To run a query within a React component, call \`useViewerFromMacro2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerFromMacro2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerFromMacro2Query({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerFromMacro2Query(baseOptions?: Apollo.QueryHookOptions<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>): Apollo.QueryResult<ViewerFromMacro2Query, any>;
export declare function useViewerFromMacro2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>): Apollo.QueryTuple<ViewerFromMacro2Query, any>;
export declare type ViewerFromMacro2QueryHookResult = ReturnType<typeof useViewerFromMacro2Query>;
export declare type ViewerFromMacro2LazyQueryHookResult = ReturnType<typeof useViewerFromMacro2LazyQuery>;
export declare type ViewerFromMacro2QueryResult = Apollo.QueryResult<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerFromMacro2Document: typeof ViewerFromMacro2Document;
  useViewerFromMacro2Query: typeof useViewerFromMacro2Query;
  useViewerFromMacro2LazyQuery: typeof useViewerFromMacro2LazyQuery;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts 1`] = `
"/* 5499ae6e4576392dd64040af2beb50713e55aa3a
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = __SchemaTypes__.Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: __SchemaTypes__.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, any>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, any>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts 1`] = `
"/* 82cffb4b099c2532290abdbd82b99653082a863a
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerYQueryVariables = __SchemaTypes__.Exact<{
  [key: string]: never;
}>;
export declare type ViewerYQuery = ({
  __typename?: 'Query';
} & {
  viewer?: __SchemaTypes__.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<__SchemaTypes__.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerYDocument: Apollo.DocumentNode;
/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryResult<ViewerYQuery, any>;
export declare function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryTuple<ViewerYQuery, any>;
export declare type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export declare type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export declare type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerYDocument: typeof ViewerYDocument;
  useViewerYQuery: typeof useViewerYQuery;
  useViewerYLazyQuery: typeof useViewerYLazyQuery;
};"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T742b65c478411637ae3b53f3dc596399a9888752 from './__generated__/pages/from-macro-ViewerFromMacro-Partial';
export function load(load: \`./viewer-from-macro.graphql\`): T742b65c478411637ae3b53f3dc596399a9888752.__GraphQLLetTypeInjection;
import Tc11b0471d913a16c353795fd16c42667ce1f4525 from './__generated__/pages/from-macro-ViewerFromMacro2-Partial';
export function gql(gql: \`
  # import Partial from './partial.graphql'
  query ViewerFromMacro2 {
    viewer {
      ...Partial
    }
  }
\`): Tc11b0471d913a16c353795fd16c42667ce1f4525.__GraphQLLetTypeInjection;
import T5499ae6e4576392dd64040af2beb50713e55aa3a from './__generated__/pages/index-Viewer-Partial';
export function load(load: \`./viewer.graphql\`): T5499ae6e4576392dd64040af2beb50713e55aa3a.__GraphQLLetTypeInjection;
import T82cffb4b099c2532290abdbd82b99653082a863a from './__generated__/pages/index-ViewerY-Partial';
export function gql(gql: \`
  # import Partial from './partial.graphql'
  query ViewerY {
    viewer {
      ...Partial
    }
  }
\`): T82cffb4b099c2532290abdbd82b99653082a863a.__GraphQLLetTypeInjection;
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/@types/graphql-let/macro.d.ts 1`] = `
"export { gql } from \\".\\";
export { load } from \\".\\";
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/__SCHEMA__.tsx 1`] = `
"/* 44e68f61ec97bb791381bd4af831b2d0a8bf31b7
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  User: User;
  ID: Scalars['ID'];
  String: Scalars['String'];
  Boolean: Scalars['Boolean'];
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
};


/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/from-macro-ViewerFromMacro-Partial.tsx 1`] = `
"/* 742b65c478411637ae3b53f3dc596399a9888752
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerFromMacroQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerFromMacroQuery = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerFromMacroDocument = gql\`
    query ViewerFromMacro {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerFromMacroQuery__
 *
 * To run a query within a React component, call \`useViewerFromMacroQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerFromMacroQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerFromMacroQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerFromMacroQuery(baseOptions?: Apollo.QueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>(ViewerFromMacroDocument, options);
      }
export function useViewerFromMacroLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>(ViewerFromMacroDocument, options);
        }
export type ViewerFromMacroQueryHookResult = ReturnType<typeof useViewerFromMacroQuery>;
export type ViewerFromMacroLazyQueryHookResult = ReturnType<typeof useViewerFromMacroLazyQuery>;
export type ViewerFromMacroQueryResult = Apollo.QueryResult<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/from-macro-ViewerFromMacro2-Partial.tsx 1`] = `
"/* c11b0471d913a16c353795fd16c42667ce1f4525
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerFromMacro2QueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerFromMacro2Query = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerFromMacro2Document = gql\`
    query ViewerFromMacro2 {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerFromMacro2Query__
 *
 * To run a query within a React component, call \`useViewerFromMacro2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerFromMacro2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerFromMacro2Query({
 *   variables: {
 *   },
 * });
 */
export function useViewerFromMacro2Query(baseOptions?: Apollo.QueryHookOptions<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>(ViewerFromMacro2Document, options);
      }
export function useViewerFromMacro2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>(ViewerFromMacro2Document, options);
        }
export type ViewerFromMacro2QueryHookResult = ReturnType<typeof useViewerFromMacro2Query>;
export type ViewerFromMacro2LazyQueryHookResult = ReturnType<typeof useViewerFromMacro2LazyQuery>;
export type ViewerFromMacro2QueryResult = Apollo.QueryResult<ViewerFromMacro2Query, ViewerFromMacro2QueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/index-Viewer-Partial.tsx 1`] = `
"/* 5499ae6e4576392dd64040af2beb50713e55aa3a
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/index-ViewerY-Partial.tsx 1`] = `
"/* 82cffb4b099c2532290abdbd82b99653082a863a
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerYQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerYQuery = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerYDocument = gql\`
    query ViewerY {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
      }
export function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
        }
export type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/partial.graphql.tsx 1`] = `
"/* 2420371333efad3ab4cee62ff9e3d02fd10bd70f
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';

import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/viewer.graphql.tsx 1`] = `
"/* 5499ae6e4576392dd64040af2beb50713e55aa3a
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`"graphql-let" command documents: **/*.tsx generates .d.ts for babel: node_modules/graphql-let/__generated__/pages/viewer-from-macro.graphql.tsx 1`] = `
"/* 742b65c478411637ae3b53f3dc596399a9888752
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerFromMacroQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type ViewerFromMacroQuery = (
  { __typename?: 'Query' }
  & { viewer?: __SchemaTypes__.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<__SchemaTypes__.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerFromMacroDocument = gql\`
    query ViewerFromMacro {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerFromMacroQuery__
 *
 * To run a query within a React component, call \`useViewerFromMacroQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerFromMacroQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerFromMacroQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerFromMacroQuery(baseOptions?: Apollo.QueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>(ViewerFromMacroDocument, options);
      }
export function useViewerFromMacroLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>(ViewerFromMacroDocument, options);
        }
export type ViewerFromMacroQueryHookResult = ReturnType<typeof useViewerFromMacroQuery>;
export type ViewerFromMacroLazyQueryHookResult = ReturnType<typeof useViewerFromMacroLazyQuery>;
export type ViewerFromMacroQueryResult = Apollo.QueryResult<ViewerFromMacroQuery, ViewerFromMacroQueryVariables>;"
`;

exports[`"graphql-let" command passes config to graphql-codegen as expected
* "useIndexSignature: true" in config effect to result having "WithIndex<TObject>" type
: schema/type-defs.graphqls.d.ts 1`] = `Array []`;

exports[`"graphql-let" command remove obsolete files: Added files 1`] = `
Array [
  "node_modules/@types/graphql-let/__generated__/pages/index-ModifiedViewer.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-ModifiedViewerFromGql-Partial.d.ts",
  "node_modules/graphql-let/__generated__/pages/index-ModifiedViewer.tsx",
  "node_modules/graphql-let/__generated__/pages/index-ModifiedViewerFromGql-Partial.tsx",
]
`;

exports[`"graphql-let" command remove obsolete files: Removed files 1`] = `
Array [
  "node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-ViewerFromGql-Partial.d.ts",
  "node_modules/graphql-let/__generated__/pages/index-Viewer-Partial.tsx",
  "node_modules/graphql-let/__generated__/pages/index-ViewerFromGql-Partial.tsx",
]
`;
