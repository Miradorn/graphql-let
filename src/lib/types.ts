export type CommandOpts = {
  cwd: string;
  configFilePath?: string;
};

export type CreatedPathsBase = {
  // "tsx" stands for `.ts(x)`s generated by GraphQL code generator as intermediate artifacts
  tsxRelPath: string;
  tsxFullPath: string;
  // "dts" stands for `.d.ts`s generated by graphql-let
  dtsRelPath: string;
  dtsFullPath: string;
};

export type CodegenContextBase<
  type extends 'file' | 'file-schema' | 'literal' | 'load'
> = {
  type: type;
  gqlHash: string;
  // If true, cache is fresh, so we don't need to generate new one.
  skip: boolean;
};

/**
 * Assumes `.graphql`s and `.graphqls`s
 */
export type FileCreatedPaths = CreatedPathsBase & {
  gqlRelPath: string;
  gqlFullPath: string;
};

/**
 * Assumes `gql(`query {}`)` calls in `.ts(x)`s
 */
export type LiteralCreatedPaths = CreatedPathsBase & {
  srcRelPath: string;
  srcFullPath: string;
};

export type FileCodegenContext = CodegenContextBase<'file'> & FileCreatedPaths;
export type FileSchemaCodegenContext = CodegenContextBase<'file-schema'> &
  FileCreatedPaths;

export type LiteralCodegenContext = {
  type: 'literal';
  gqlContent: string;
  strippedGqlContent: string;
} & CodegenContextBase<'literal'> &
  LiteralCreatedPaths;

export type LoadCodegenContext = {
  type: 'load';
  gqlPathFragment: string; // load(gqlPathFragment)
  srcRelPath: string;
  srcFullPath: string;
  gqlRelPath: string;
  gqlFullPath: string;
} & CodegenContextBase<'load'> &
  CreatedPathsBase;

export type CodegenContext =
  | FileCodegenContext
  | FileSchemaCodegenContext
  | LiteralCodegenContext
  | LoadCodegenContext;

export function isLiteralContext({ type }: CodegenContext): boolean {
  return type === 'literal';
}
