export type CommandOpts = {
  cwd: string;
  configFilePath?: string;
};

export type CreatedPathsBase = {
  // "tsx" stands for `.ts(x)`s generated by GraphQL code generator as intermediate artifacts
  tsxRelPath: string;
  tsxFullPath: string;
  // "dts" stands for `.d.ts`s generated by graphql-let
  dtsRelPath: string;
  dtsFullPath: string;
};

export type CodegenContextBase<
  type extends 'document-import' | 'schema-import' | 'gql-call' | 'load-call'
> = {
  type: type;
  gqlHash: string;
  // If true, cache is fresh, so we don't need to generate new one.
  skip: boolean;
};

/**
 * Assumes `.graphql`s and `.graphqls`s
 */
export type FileImportCreatedPaths = CreatedPathsBase & {
  gqlRelPath: string;
  gqlFullPath: string;
};

/**
 * Assumes `gql(`query {}`)` calls in `.ts(x)`s
 */
export type GqlCallCreatedPaths = CreatedPathsBase & {
  srcRelPath: string;
  srcFullPath: string;
};

export type SchemaImportCodegenContext = CodegenContextBase<'schema-import'> &
  CreatedPathsBase;

export type DocumentImportCodegenContext = CodegenContextBase<'document-import'> &
  FileImportCreatedPaths;

export type GqlCallCodegenContext = {
  type: 'gql-call';
  gqlContent: string;
  resolvedGqlContent: string;
  dependantFullPaths: string[];
} & CodegenContextBase<'gql-call'> &
  GqlCallCreatedPaths;

export type LoadCallCodegenContext = {
  type: 'load-call';
  gqlPathFragment: string; // load(gqlPathFragment)
  srcRelPath: string;
  srcFullPath: string;
  gqlRelPath: string;
  gqlFullPath: string;
  dependantFullPaths: string[];
} & CodegenContextBase<'load-call'> &
  CreatedPathsBase;

export type CodegenContext =
  | SchemaImportCodegenContext
  | DocumentImportCodegenContext
  | GqlCallCodegenContext
  | LoadCallCodegenContext;

export function isAllSkip(codegenContext: CodegenContext[]): boolean {
  for (const { skip } of codegenContext) if (!skip) return false;
  return true;
}

export type BabelOptions = {
  configFilePath?: string;
};

export function getSchemaImportContext(codegenContext: CodegenContext[]) {
  const context = codegenContext.find(({ type }) => type === 'schema-import');
  if (!context) throw new Error('"schema-import" context must appear');
  return context;
}
